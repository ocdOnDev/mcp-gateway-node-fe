import express from "express";
import cors from "cors";
import helmet from "helmet";
import morgan from "morgan";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import { createProxyMiddleware } from "http-proxy-middleware";
import rateLimit from "express-rate-limit";
import fs from "fs";

dotenv.config();
const app = express();

// === Core Middleware ===
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: "2mb" }));
app.use(morgan("combined", { stream: fs.createWriteStream("./logs/access.log", { flags: "a" }) }));

// === Rate Limiter ===
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 100, // limit each IP to 100 requests per minute
  message: { error: "Too many requests, slow down." }
});
app.use(limiter);

// === JWT Authentication ===
function verifyToken(req, res, next) {
  const header = req.headers["authorization"];
  if (!header) return res.status(401).json({ error: "Missing Authorization header" });

  const token = header.split(" ")[1];
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: "Invalid token" });
    req.user = user;
    next();
  });
}

// === Load tools dynamically ===
const tools = JSON.parse(fs.readFileSync("./tools.config.json", "utf8"));
Object.entries(tools).forEach(([name, cfg]) => {
  console.log(`Registering /tool/${name} â†’ ${cfg.target}`);
  app.use(
    `/tool/${name}`,
    verifyToken,
    createProxyMiddleware({
      target: cfg.target,
      changeOrigin: true,
      pathRewrite: cfg.pathRewrite || {},
      secure: cfg.secure ?? true,
      onProxyReq(proxyReq, req) {
        // Optional: attach user info to downstream requests
        if (req.user) proxyReq.setHeader("x-user-id", req.user.id || "anonymous");
      }
    })
  );
});

// === Health Check ===
app.get("/health", (req, res) => res.json({ status: "ok", time: new Date().toISOString() }));

// === Error Handling ===
app.use((err, req, res, next) => {
  console.error("Gateway error:", err);
  res.status(500).json({ error: "Internal gateway error" });
});

// === Start server ===
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`ðŸš€ API Gateway running on port ${PORT}`));
